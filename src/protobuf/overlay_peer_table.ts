// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.21.12
// source: protobuf/overlay_peer_table.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

/**
 * PeerRecord defines the information corresponding to a peer
 * container in the overlay network.
 */
export interface PeerRecord {
  /**
   * Endpoint IP is the IP of the container attachment on the
   * given overlay network.
   */
  endpointIp: string;
  /**
   * Endpoint MAC is the mac address of the container attachment
   * on the given overlay network.
   */
  endpointMac: string;
  /**
   * Tunnel Endpoint IP defines the host IP for the host in
   * which this container is running and can be reached by
   * building a tunnel to that host IP.
   */
  tunnelEndpointIp: string;
}

function createBasePeerRecord(): PeerRecord {
  return { endpointIp: "", endpointMac: "", tunnelEndpointIp: "" };
}

export const PeerRecord: MessageFns<PeerRecord> = {
  encode(message: PeerRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointIp !== "") {
      writer.uint32(10).string(message.endpointIp);
    }
    if (message.endpointMac !== "") {
      writer.uint32(18).string(message.endpointMac);
    }
    if (message.tunnelEndpointIp !== "") {
      writer.uint32(26).string(message.tunnelEndpointIp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PeerRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePeerRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.endpointIp = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endpointMac = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tunnelEndpointIp = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PeerRecord {
    return {
      endpointIp: isSet(object.endpointIp) ? globalThis.String(object.endpointIp) : "",
      endpointMac: isSet(object.endpointMac) ? globalThis.String(object.endpointMac) : "",
      tunnelEndpointIp: isSet(object.tunnelEndpointIp) ? globalThis.String(object.tunnelEndpointIp) : "",
    };
  },

  toJSON(message: PeerRecord): unknown {
    const obj: any = {};
    if (message.endpointIp !== "") {
      obj.endpointIp = message.endpointIp;
    }
    if (message.endpointMac !== "") {
      obj.endpointMac = message.endpointMac;
    }
    if (message.tunnelEndpointIp !== "") {
      obj.tunnelEndpointIp = message.tunnelEndpointIp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PeerRecord>, I>>(base?: I): PeerRecord {
    return PeerRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PeerRecord>, I>>(object: I): PeerRecord {
    const message = createBasePeerRecord();
    message.endpointIp = object.endpointIp ?? "";
    message.endpointMac = object.endpointMac ?? "";
    message.tunnelEndpointIp = object.tunnelEndpointIp ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
